// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/todo-service.proto

package todoservice

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TodoService service

func NewTodoServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TodoService service

type TodoService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	CreateNewTodo(ctx context.Context, in *TodoItem, opts ...client.CallOption) (*CallResponse, error)
	GetAllTodos(ctx context.Context, in *Void, opts ...client.CallOption) (*AllTodoItems, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (TodoService_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (TodoService_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (TodoService_BidiStreamService, error)
}

type todoService struct {
	c    client.Client
	name string
}

func NewTodoService(name string, c client.Client) TodoService {
	return &todoService{
		c:    c,
		name: name,
	}
}

func (c *todoService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) CreateNewTodo(ctx context.Context, in *TodoItem, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.CreateNewTodo", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) GetAllTodos(ctx context.Context, in *Void, opts ...client.CallOption) (*AllTodoItems, error) {
	req := c.c.NewRequest(c.name, "TodoService.GetAllTodos", in)
	out := new(AllTodoItems)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) ClientStream(ctx context.Context, opts ...client.CallOption) (TodoService_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "TodoService.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &todoServiceClientStream{stream}, nil
}

type TodoService_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type todoServiceClientStream struct {
	stream client.Stream
}

func (x *todoServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *todoServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *todoServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *todoServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *todoServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *todoService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (TodoService_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "TodoService.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &todoServiceServerStream{stream}, nil
}

type TodoService_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type todoServiceServerStream struct {
	stream client.Stream
}

func (x *todoServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *todoServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *todoServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *todoServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *todoServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoService) BidiStream(ctx context.Context, opts ...client.CallOption) (TodoService_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "TodoService.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &todoServiceBidiStream{stream}, nil
}

type TodoService_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type todoServiceBidiStream struct {
	stream client.Stream
}

func (x *todoServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *todoServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *todoServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *todoServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *todoServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *todoServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TodoService service

type TodoServiceHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	CreateNewTodo(context.Context, *TodoItem, *CallResponse) error
	GetAllTodos(context.Context, *Void, *AllTodoItems) error
	ClientStream(context.Context, TodoService_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, TodoService_ServerStreamStream) error
	BidiStream(context.Context, TodoService_BidiStreamStream) error
}

func RegisterTodoServiceHandler(s server.Server, hdlr TodoServiceHandler, opts ...server.HandlerOption) error {
	type todoService interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		CreateNewTodo(ctx context.Context, in *TodoItem, out *CallResponse) error
		GetAllTodos(ctx context.Context, in *Void, out *AllTodoItems) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type TodoService struct {
		todoService
	}
	h := &todoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TodoService{h}, opts...))
}

type todoServiceHandler struct {
	TodoServiceHandler
}

func (h *todoServiceHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.TodoServiceHandler.Call(ctx, in, out)
}

func (h *todoServiceHandler) CreateNewTodo(ctx context.Context, in *TodoItem, out *CallResponse) error {
	return h.TodoServiceHandler.CreateNewTodo(ctx, in, out)
}

func (h *todoServiceHandler) GetAllTodos(ctx context.Context, in *Void, out *AllTodoItems) error {
	return h.TodoServiceHandler.GetAllTodos(ctx, in, out)
}

func (h *todoServiceHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.TodoServiceHandler.ClientStream(ctx, &todoServiceClientStreamStream{stream})
}

type TodoService_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type todoServiceClientStreamStream struct {
	stream server.Stream
}

func (x *todoServiceClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *todoServiceClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *todoServiceClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *todoServiceClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *todoServiceClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *todoServiceHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TodoServiceHandler.ServerStream(ctx, m, &todoServiceServerStreamStream{stream})
}

type TodoService_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type todoServiceServerStreamStream struct {
	stream server.Stream
}

func (x *todoServiceServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *todoServiceServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *todoServiceServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *todoServiceServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *todoServiceServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *todoServiceHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.TodoServiceHandler.BidiStream(ctx, &todoServiceBidiStreamStream{stream})
}

type TodoService_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type todoServiceBidiStreamStream struct {
	stream server.Stream
}

func (x *todoServiceBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *todoServiceBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *todoServiceBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *todoServiceBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *todoServiceBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *todoServiceBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
