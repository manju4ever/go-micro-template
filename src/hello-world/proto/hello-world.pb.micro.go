// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/hello-world.proto

package helloworld

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HelloWorld service

func NewHelloWorldEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HelloWorld service

type HelloWorldService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (HelloWorld_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (HelloWorld_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (HelloWorld_BidiStreamService, error)
}

type helloWorldService struct {
	c    client.Client
	name string
}

func NewHelloWorldService(name string, c client.Client) HelloWorldService {
	return &helloWorldService{
		c:    c,
		name: name,
	}
}

func (c *helloWorldService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "HelloWorld.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldService) ClientStream(ctx context.Context, opts ...client.CallOption) (HelloWorld_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "HelloWorld.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &helloWorldServiceClientStream{stream}, nil
}

type HelloWorld_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type helloWorldServiceClientStream struct {
	stream client.Stream
}

func (x *helloWorldServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *helloWorldServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *helloWorldServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloWorldServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloWorldServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *helloWorldService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (HelloWorld_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "HelloWorld.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &helloWorldServiceServerStream{stream}, nil
}

type HelloWorld_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type helloWorldServiceServerStream struct {
	stream client.Stream
}

func (x *helloWorldServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *helloWorldServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *helloWorldServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloWorldServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloWorldServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldService) BidiStream(ctx context.Context, opts ...client.CallOption) (HelloWorld_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "HelloWorld.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &helloWorldServiceBidiStream{stream}, nil
}

type HelloWorld_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type helloWorldServiceBidiStream struct {
	stream client.Stream
}

func (x *helloWorldServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *helloWorldServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *helloWorldServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloWorldServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloWorldServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *helloWorldServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HelloWorld service

type HelloWorldHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, HelloWorld_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, HelloWorld_ServerStreamStream) error
	BidiStream(context.Context, HelloWorld_BidiStreamStream) error
}

func RegisterHelloWorldHandler(s server.Server, hdlr HelloWorldHandler, opts ...server.HandlerOption) error {
	type helloWorld interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type HelloWorld struct {
		helloWorld
	}
	h := &helloWorldHandler{hdlr}
	return s.Handle(s.NewHandler(&HelloWorld{h}, opts...))
}

type helloWorldHandler struct {
	HelloWorldHandler
}

func (h *helloWorldHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.HelloWorldHandler.Call(ctx, in, out)
}

func (h *helloWorldHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.HelloWorldHandler.ClientStream(ctx, &helloWorldClientStreamStream{stream})
}

type HelloWorld_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type helloWorldClientStreamStream struct {
	stream server.Stream
}

func (x *helloWorldClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *helloWorldClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *helloWorldClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloWorldClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloWorldClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *helloWorldHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.HelloWorldHandler.ServerStream(ctx, m, &helloWorldServerStreamStream{stream})
}

type HelloWorld_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type helloWorldServerStreamStream struct {
	stream server.Stream
}

func (x *helloWorldServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *helloWorldServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *helloWorldServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloWorldServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloWorldServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *helloWorldHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.HelloWorldHandler.BidiStream(ctx, &helloWorldBidiStreamStream{stream})
}

type HelloWorld_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type helloWorldBidiStreamStream struct {
	stream server.Stream
}

func (x *helloWorldBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *helloWorldBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *helloWorldBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloWorldBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloWorldBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *helloWorldBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
