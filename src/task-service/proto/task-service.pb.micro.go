// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/task-service.proto

package taskservice

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TaskService service

func NewTaskServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TaskService service

type TaskService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	CreateTodo(ctx context.Context, in *TodoItem, opts ...client.CallOption) (*Status, error)
	GetAllTodos(ctx context.Context, in *Void, opts ...client.CallOption) (*TodoItems, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreateTodo(ctx context.Context, in *TodoItem, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateTodo", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetAllTodos(ctx context.Context, in *Void, opts ...client.CallOption) (*TodoItems, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetAllTodos", in)
	out := new(TodoItems)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	CreateTodo(context.Context, *TodoItem, *Status) error
	GetAllTodos(context.Context, *Void, *TodoItems) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) error {
	type taskService interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		CreateTodo(ctx context.Context, in *TodoItem, out *Status) error
		GetAllTodos(ctx context.Context, in *Void, out *TodoItems) error
	}
	type TaskService struct {
		taskService
	}
	h := &taskServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskService{h}, opts...))
}

type taskServiceHandler struct {
	TaskServiceHandler
}

func (h *taskServiceHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.TaskServiceHandler.Call(ctx, in, out)
}

func (h *taskServiceHandler) CreateTodo(ctx context.Context, in *TodoItem, out *Status) error {
	return h.TaskServiceHandler.CreateTodo(ctx, in, out)
}

func (h *taskServiceHandler) GetAllTodos(ctx context.Context, in *Void, out *TodoItems) error {
	return h.TaskServiceHandler.GetAllTodos(ctx, in, out)
}
